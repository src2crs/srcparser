package sourcefile

import (
	"fmt"
	"go/parser"
	"go/token"
	"log"
	"os"

	"github.com/src2crs/srcparser/sourcefile/nodes"
)

// SourceFile is a container that encapsulates a file path together with its source code
// and an abstract syntax tree from the ast package.
// It exposes methods to access the source code and parser results.
type SourceFile struct {
	fileinfo      nodes.FileInfo
	parser_errors error
}

// New creates a new SourceFile object from a file path and parses it.
func New(filepath string) *SourceFile {
	content, err := os.ReadFile(filepath)
	if err != nil {
		log.Fatal(err)
	}

	fileset := token.NewFileSet()
	file, errors := parser.ParseFile(fileset, filepath, content, parser.ParseComments)
	fileinfo := nodes.NewFileInfo(filepath, content, file)

	return &SourceFile{
		fileinfo:      fileinfo,
		parser_errors: errors,
	}
}

// HasParserErrors returns true if errors occurred during parsing.
func (sourcefile *SourceFile) HasParserErrors() bool {
	return sourcefile.parser_errors != nil
}

// Source returns the file's complete source code as a string.
func (sourcefile *SourceFile) Source() string {
	return sourcefile.fileinfo.Source()
}

// Section returns the file's complete source code between
// the positions given by begin and end.
// These positions are byte positions marking the bytes
// at the beginning and after the end of the source code, relative to the file.
func (sourcefile *SourceFile) Section(pos, end int) string {
	return sourcefile.fileinfo.Section(pos, end)
}

// ParserErrors returns the error string generated by the parser, if any.
// If no error occurred, the file name is returned
// with a message indicating that there were no errors.
func (sourcefile *SourceFile) ParserErrors() string {
	if sourcefile.HasParserErrors() {
		return sourcefile.parser_errors.Error()
	}
	return fmt.Sprintf("%s: no parser errors", sourcefile.fileinfo.Path())
}
