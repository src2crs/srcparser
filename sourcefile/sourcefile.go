package sourcefile

import (
	"fmt"
	"go/ast"
	"go/parser"
	"go/token"
	"log"
	"os"
)

// SourceFile is a container that encapsulates a file path together with its source code
// and an abstract syntax tree from the ast package.
// It exposes methods to access the source code and parser results.
type SourceFile struct {
	file_set      *token.FileSet
	file          *ast.File
	filepath      string
	filecontent   string
	parser_errors error
}

// New creates a new SourceFile object from a file path and parses it.
func New(filepath string) *SourceFile {
	content, err := os.ReadFile(filepath)
	if err != nil {
		log.Fatal(err)
	}

	sourcefile := &SourceFile{
		file_set:      token.NewFileSet(),
		file:          nil,
		filepath:      filepath,
		filecontent:   string(content),
		parser_errors: nil,
	}

	sourcefile.parseFile()

	return sourcefile
}

// parseFile expects a file path and parses that file.
// This replaces any results from previous runs and is meant to be used only
// during the construction of a new SourceFile object.
func (sourcefile *SourceFile) parseFile() {
	file, err := parser.ParseFile(sourcefile.file_set, sourcefile.filepath, []byte(sourcefile.filecontent), parser.ParseComments)

	sourcefile.file = file
	if err != nil {
		sourcefile.parser_errors = err
	}
}

// HasParserErrors returns true if errors occurred during parsing.
func (sourcefile *SourceFile) HasParserErrors() bool {
	return sourcefile.parser_errors != nil
}

// Source returns the file's complete source code as a string.
func (sourcefile *SourceFile) Source() string {
	begin := 0
	end := int(sourcefile.file.End() - sourcefile.file.Pos())
	return sourcefile.Section(begin, end)
}

// Section returns the file's complete source code between
// the positions given by begin and end.
// These positions are byte positions marking the bytes
// at the beginning and after the end of the source code, relative to the file.
func (sourcefile *SourceFile) Section(pos, end int) string {
	return sourcefile.filecontent[pos:end]
}

// ParserErrors returns the error string generated by the parser, if any.
// If no error occurred, the file name is returned
// with a message indicating that there were no errors.
func (sourcefile *SourceFile) ParserErrors() string {
	if sourcefile.HasParserErrors() {
		return sourcefile.parser_errors.Error()
	}
	return fmt.Sprintf("%s: no parser errors", sourcefile.filepath)
}
